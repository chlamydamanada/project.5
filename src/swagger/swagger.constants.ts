export enum SwaggerConstants {
  unauthorized = 'Unauthorized',
  badReq = 'If the inputModel has incorrect values',
  success = 'Success',
  noContent = 'No Content',
  forbidden = 'Forbidden',
  notFound = 'Not Found',
  //blogs
  getCreatedBlog = 'Returns the newly created blog',
  getBlog = 'Returns the blog by id',
  createBlog = 'Create new blog',
  deleteBlogById = 'Delete blog specified by id',
  updateBlogById = 'Update existing Blog by id with input data',
  getBloggersBlogs = 'Returns blogs, for which current user is owner, with paging',
  banBlog = 'Ban or unban blog',
  bindBlogToUser = 'Bind Blog with user, if blog doesn`t have an owner yet',
  getBlogs = 'Returns blogs with paging',
  blogNotExist = 'If the specified blog does not exist',
  //posts
  getCreatedPost = 'Returns the newly created post',
  getPost = 'Returns the post by id',
  createPost = 'Create new post for specific blog',
  updatePost = 'Update existing post by id with input data',
  getPosts = 'Returns posts with paging',
  postNotExist = 'If the specified post does not exist',
  //users
  banUser = 'Ban or unban user',
  getBloggersBannedUsers = 'Returns all banned users for blog',
  getCreatedUser = 'Returns the newly created user',
  createUser = 'Add new user To the System',
  deleteUserById = 'Delete user specified by id',
  getUsers = 'Returns all users',
  //comments
  getBloggersComments = 'Returns all comments for all posts inside all current blogs',
  getComments = 'Returns comments with paging',
  getComment = 'Returns the comment by id',
  createComment = 'Create new comment to the specified post',
  getCreatedComment = 'Returns the newly created comment',
  commentNotExist = 'If the specified comment does not exist',
  updateComment = 'Update existing comment by id with input data',
  deleteComment = 'Delete existing comment by id with input data',
  //devices
  getDevices = 'Returns all devices with active sessions for current user',
  deleteAllDevicesExceptThis = 'Terminate all other exclude current device`s sessions',
  deleteDeviceById = 'Terminate specified device session',
  //questions
  getAllQuestions = 'Return all guestions with pagination and filtering',
  createQuestion = 'Create new question',
  getCreatedQuestion = 'Returns the newly created question',
  updateQuestion = 'Update existing question by id with input data',
  publishQuestion = 'Publish or unpunlish question',
  deleteQuestion = 'Delete existing question by id',
  //likeStatus
  likeStatus = 'Make like/unlike/dislike/undislike operations',
  //throttler
  throttler = 'More than 5 attempts from one IP-address during 10 seconds',
  //jwt
  jwtOk = 'Returns JWT accessToken (expired after 10 seconds) in body and JWT refreshToken in cookie (http-only, secure) (expired after 20 seconds)',
  registrationOk = 'Input data is accepted. Email with confirmation code will be send to passed email address',
  confirmOk = 'Email was verified. Account was activated',
  resendingOk = 'Input data is accepted.Email with confirmation code will be send to passed email address.Confirmation code should be inside link as query param, for example: https://some-front.com/confirm-registration?code=youtcodehere',
  passRecoveryOk = "Even if current email is not registered (for prevent user's email detection)",
  newPassOk = 'Code is valid and new password is accepted',
  //auth
  login = 'Try login user to the system',
  registration = 'Registration in the system. Email with confirmation code will be send to passed email address',
  me = 'Returns information about current user',
  confirm = 'Confirm registration',
  resending = 'Resend confirmation registration email',
  rT = 'Generate new pair of access and refresh tokens',
  logout = 'In cookie client must send correct refresh token that will be revoked',
  passRecovery = 'Password recovery via email confirmation. Email should be sent with recovery code inside',
  newPass = 'Confirm password recovery',
}
